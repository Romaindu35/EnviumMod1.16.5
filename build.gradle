buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = 'enviummod'

final isCiBuilding = System.getenv().containsKey('CI')



allprojects {
    version = '1.16.5-DEV'
    if (isCiBuilding) {
        logger.warn 'CI build.'
        version = '1.16.5-build-' + System.getenv('VERSION')
    }
    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
    group = 'fr.envium.enviummod'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20201028-1.16.3'
    //mappings channel: 'snapshot', version: '20210309-1.16.5'
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=enviummod.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                enviummod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=enviummod.mixins.json"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                enviummod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'enviummod', '--all', '--output', file('src/generated/resources/')

            mods {
                enviummod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenLocal()
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        url "https://www.cursemaven.com"
    }
}

configurations {
    driver
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.4'

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.71")
    compileOnly fg.deobf("curse.maven:SpaceBosstools-377448:3269047")
    runtimeOnly fg.deobf("curse.maven:SpaceBosstools-377448:3269047")
    /*compileOnly fg.deobf("curse.maven:Obfuscate-289380:3148131")
    runtimeOnly fg.deobf("curse.maven:Obfuscate-289380:3148131")*/
    implementation fg.deobf("curse.maven:obfuscate-289380:3067472")
    runtimeOnly fg.deobf("curse.maven:StorageDrawer-223852:3180569")
    /*runtimeOnly fg.deobf("curse.maven:Mekanism-268560:3206392")
    runtimeOnly fg.deobf("curse.maven:Mekanism_all-268560:3206394")*/
    //runtimeOnly fg.deobf("curse.maven:WorldEdit-225608:3209370")


    implementation shadow ('com.github.Vatuu:discord-rpc:1.6.2')
    implementation 'org.jetbrains:annotations:19.0.0'
    api 'org.apache.commons:commons-math3:3.6.1'
    testImplementation 'junit:junit:4.12'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
    //runtime "mysql:mysql-connector-java:8.0.15"

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}
// Example for how to get properties into the manifest for reading by the runtime..
    jar {
        classifier "slim"
        manifest {
            //attributes 'FMLAT': 'enviummod_at.cfg',
            attributes([
                    "Specification-Title": "enviummod",
                    "Specification-Vendor": "envium",
                    "Specification-Version": "1", // We are version 1 of ourselves
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"envium",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs": "enviummod.mixins.json"
            ])
        }
    }


shadowJar {
    classifier ''
    configurations = [project.configurations.shadow]

    dependencies{
        exclude(dependency('org.jetbrains:annotations'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "enviummod.refmap.json"
}

tasks.build.dependsOn tasks.shadowJar